doctype 5
html(lang='en')

  head

    meta(charset='utf-8')
    title Fadroma by Hack.bg
    link(rel='stylesheet' href='style.css')
    link(rel='stylesheet' href='https://fonts.googleapis.com/css?family=Inter:400|Inter:700|Inter:900&display=swap')

  body

    header
      p
        img(src='./logo.svg' height=300)
      p Made with ðŸ’š at <a href="https://hack.bg">Hack.bg</a>

    div(id="platforms")
      h2 Supported platforms

      .grid
        .feature.center
          h3 Secret Network

    mixin feature (name='', categories=[])
      .feature
        h4= name
        div.description
          block
        for c in categories
          +feature-category(c)

    mixin feature-category (name='')
      .category= name

    div(id="features")

      h2(id="features-available") Available features

      .grid
        +feature('Derive contract')
          | Procedural macro for generating smart contract boilerplate
        +feature('Reproducible builder')
          | Perform production builds of your contracts in a Docker container
        +feature('Scriptable deployments')
          | Manage hundreds of heterogeneous contracts using TypeScript without a compilation step
        +feature('Automatic devnet management')
          | Spawn local blockchain nodes for development and testing
        +feature('Transaction receipts')
          | Keep track of uploads, instantiations, and configuration
        +feature('Contract clients')
          | Define contract-specific client classes to call contract methods
          | perform off-chain logic in TypeScript
        +feature('Ensemble testing')
          | Test multiple interoperating smart contracts using a Rust API
        +feature('Executable specifications')
          | Test your smart contracts and off-chain logic from TypeScript
          | without the overhead of testing frameworks
        +feature('Environment-based configuration')
          | Configure your workflow using environment variables and/or a .env file
        +feature('Contract ownership')
          | Allow a privileged user to perform administrative operations
        +feature('Killswitch')
          | Emergency pause and permanent termination for your contract
        +feature('Viewing keys')
          | Generate and use viewing keys in any contract
        +feature('Permits')
          | Generate and use revokable query permits
        +feature('256-bit arithmetic')
          | 256-bit integer support in Cosmos for easy EVM interop
        +feature('On-chain checksum generation')
          | Generate SHA256 checksums for arbitrary data from your contract
        +feature('Pseudo-random number generator')
          | ChaCha-based PRNG
        +feature('ISNIP20')
          | Make calls to SNIP20 tokens
        +feature('SNIP20')
          | Customize a SNIP20 token's functionality,
          | or embed it in your contract alongside custom logic
        +feature('Storage helpers')
          | Keyed, namepaced, and iterable data storage on top of Cosmos built-in KV

      h2(id="features-experimental") Experimental features

      .grid
        +feature('Mocknet')
          | Quickly execute smart contracts in a simulated local environment,
          | without waiting for block validation
        +feature('Transaction bundles')
          | Execute multiple messages in a single transaction
        +feature('Composability')
          | Compose self-contained subsystems into a single contract
        +feature('Literate programming')
          | Wrap TypeScript in Markdown to document client code and deploy logic in place

      h2(id="features-planned") Planned features

      .grid
        +feature('Project scaffolding')
          | Generate project boilerplate using <code>npx fadroma create</code>
        +feature('Docker Compose integration')
          | Integrate your frontend and off-chain backend with devnet and development server
        +feature('Smart code reloading')
          | Automatically redeploy contracts on changes to source code
        +feature('Privacy-preserving migrations')
          | Allow your users to migrate their private state to newer versions of deployed contracts
        +feature('Development dashboard')
          | Monitor devnet state, visualize deployment contents, view test results and coverage,
          | and perform administrative operations, from a unified local dashboard
        +feature('Schema-based clients')
          | Generate client classes and microfrontends from the JSON schema exported by contracts
        +feature('Property-based testing')
          | Test smart contracts for edge cases using auto-generated input data
