doctype 5
html(lang='en')

  head

    meta(charset='utf-8')
    title Fadroma by Hack.bg
    link(rel='stylesheet' href='style.css')
    link(rel='stylesheet' href='https://fonts.googleapis.com/css?family=Inter:400|Inter:700|Inter:900&display=swap')

  body

    header
      p
        img(src='./logo.svg' height=300)
      p#authorship Made with ðŸ’š at <a href="https://hack.bg">Hack.bg</a>

    div#quick-start
      p Add to your project with:
      code.block git submodule add -b v100 https://github.com/hackbg/fadroma

    div#platforms
      h2 Supported platforms

      .grid
        a.feature.center(href="https://scrt.network/")
          img#scrt-logo(src="./scrt.svg" alt="Secret Network by Scrt Labs")
          p
            strong.
              Secret Network is an open-source, permissionless blockchain based on
              original privacy research and papers first written at MIT in 2015,
              including "Decentralizing Privacy", now one of the most
              influential papers in the blockchain space with 2,000 academic citations.

    mixin feature (name='')
      .feature
        h4= name
        div.description
          block
        for c in categories
          +feature-category(c)

    mixin feature-tagged (tag='', name='')
      .feature
        h4
          |= name
          br
          .tag= tag
        div.description
          block
        for c in categories
          +feature-category(c)

    div#features

      h2(id="features-available") Provided capabilities

      .grid
        +feature('Derive contract')
          | Procedural macro for generating smart contract boilerplate
        +feature('Reproducible builder')
          | Perform production builds of your contracts in a Docker container
        +feature('Scriptable deployments')
          | Manage hundreds of heterogeneous contracts using TypeScript without a compilation step
        +feature('Automatic devnet management')
          | Spawn local blockchain nodes for development and testing
        +feature('Transaction receipts')
          | Keep track of uploads, instantiations, and configuration
        +feature('Contract clients')
          | Define contract-specific client classes to call contract methods
          | perform off-chain logic in TypeScript
        +feature('Ensemble testing')
          | Test multiple interoperating smart contracts using a Rust API
        +feature('Executable specifications')
          | Test your smart contracts and off-chain logic from TypeScript
          | without the overhead of testing frameworks
        +feature('Environment-based configuration')
          | Configure your workflow using environment variables and/or a .env file
        +feature('256-bit arithmetic')
          | 256-bit integer support in Cosmos for easy EVM interop
        +feature('On-chain checksum generation')
          | Generate SHA256 checksums for arbitrary data from your contract
        +feature('Pseudo-random number generator')
          | ChaCha-based PRNG
        +feature('Contract ownership')
          | Allow a privileged user to perform administrative operations
        +feature('Killswitch')
          | Emergency pause and permanent termination for your contract
        +feature('Viewing keys')
          | Generate and use viewing keys in any contract
        +feature('Permits')
          | Generate and use revokable query permits
        +feature('ISNIP20')
          | Make calls to SNIP20 tokens
        +feature('SNIP20')
          | Customize a SNIP20 token's functionality,
          | or embed it in your contract alongside custom logic
        +feature('Storage helpers')
          | Keyed, namepaced, and iterable data storage on top of Cosmos built-in KV
        +feature-tagged('Experimental', 'Mocknet')
          | Quickly execute smart contracts in a simulated local environment,
          | without waiting for block validation
        +feature-tagged('Experimental', 'Transaction bundles')
          | Execute multiple messages in a single transaction
        +feature-tagged('Experimental', 'Composability')
          | Compose self-contained subsystems into a single contract
        +feature-tagged('Experimental', 'Literate programming')
          | Wrap TypeScript in Markdown to document client code and deploy logic in place
        +feature-tagged('Planned', 'Project scaffolding')
          | Generate project boilerplate using <code>npx fadroma create</code>
        +feature-tagged('Planned', 'Docker Compose integration')
          | Integrate your frontend and off-chain backend with devnet and development server
        +feature-tagged('Planned', 'Smart code reloading')
          | Automatically redeploy contracts on changes to source code
        +feature-tagged('Planned', 'Privacy-preserving migrations')
          | Allow your users to migrate their private state to newer versions of deployed contracts
        +feature-tagged('Planned', 'Development dashboard')
          | Monitor devnet state, visualize deployment contents, view test results and coverage,
          | and perform administrative operations, from a unified local dashboard
        +feature-tagged('Planned', 'Schema-based clients')
          | Generate client classes and microfrontends from the JSON schema exported by contracts
        +feature-tagged('Planned', 'Property-based testing')
          | Test smart contracts for edge cases using auto-generated input data

    div#license

      .grid
        a.feature.center(href="https://www.gnu.org/licenses/agpl-3.0.txt")
          img#scrt-logo(src="./agpl3.svg" alt="GNU Affero General Public License, Version 3")
          p
            strong.
              Fadroma is normally licensed under the GNU Affero General Public License, Version 3.
              If that license doesn't work for us, email us at hello@hack.bg for custom licensing
              options.
